#!/bin/bash -e

# Script sourced by all other scripts. Used e.g. to
# set variables common to all scripts.

# =============================================================================
# =                            VARIABLE DEFINITIONS                           =
# =============================================================================

# Directory containing this script
THIS_SCRIPT_DIR="$(cd "$(dirname ${BASH_SOURCE[0]})" > /dev/null && pwd)"
# Root of the Git repo
GIT_ROOT="${THIS_SCRIPT_DIR}/.."
# Directory containing the scripts
SCRIPTS_DIR="${GIT_ROOT}/scripts"
# Directory containing the config files
CONFIG_DIR="${GIT_ROOT}/config"
# File indicating that the anthonyzation script was run.
ANTHONYZATION_FLAG="/etc/anthonyzation.d/anthonyzation-was-run"

# =============================================================================
# =                              FUNCTION DEFINITIONS                         =
# =============================================================================

# EXPECTED PARAMS:
# any amount
message() {
    echo -n -e '\e[1;92m'
    echo "$@"
    echo -n -e '\e[0m'
}

# EXPECTED PARAMS:
# any amount
messageError() {
    echo -n -e '\e[1;91m'
    echo "$@" >&2
    echo -n -e '\e[0m'
    false
}

# EXPECTED PARAMS:
# 1 : The expected number of arguments
# 2 : The actual number of arguments
#
# RETURN CODE:
# false if expected != actual ; otherwise 0
checkParamNum() {
    if [ "${2}" != "${1}" ]; then
        messageError "${FUNCNAME[1]} : Got ${2} params ; expected ${1}"
    fi
}

# EXPECTED PARAMS:
# None
setSystemInfo() {
    checkParamNum 0 $# || exit 1

    # BASED ON https://unix.stackexchange.com/questions/6345/how-can-i-get-distribution-name-and-version-number-in-a-simple-shell-script
    if [ -f /etc/os-release ]; then
        # freedesktop.org and systemd
        . /etc/os-release
        OS=GNU/Linux
        DISTRO="${NAME}"
        VER="${VERSION_ID}"
    elif type lsb_release >/dev/null 2>&1; then
        # linuxbase.org
        OS=GNU/Linux
        DISTRO="$(lsb_release -si)"
        VER="$(lsb_release -sr)"
    elif [ -f /etc/lsb-release ]; then
        # For some versions of Debian/Ubuntu without lsb_release command
        . /etc/lsb-release
        OS=GNU/Linux
        DISTRO=$DISTRIB_ID
        VER="${DISTRIB_RELEASE}"
    elif [ -f /etc/debian_version ]; then
        # Older Debian/Ubuntu/etc.
        OS=GNU/Linux
        DISTRO=Debian
        VER="$(cat /etc/debian_version)"
    elif [ -f /etc/SuSe-release ] || [ -f /etc/redhat-release ]; then
        # Older Red Hat, CentOS, etc.
        OS=GNU/Linux
        DISTRO="$(grep -oP '^\w+' /etc/redhat-release)"
        VER="$(grep -oP '\d+(\.\d+)*' /etc/redhat-release)"
    else
        # Fall back to uname, e.g. "Linux <version>",
        # also works for BSD, Cygwin, MINGW, etc.
        OS="$(uname -o)"
        DISTRO="$(uname -s)"
        VER="$(uname -r)"
    fi
}

# EXPECTED PARAMS:
# any amount
superUserDo() {
    if [ "${OS}" == GNU/Linux ]; then
        # Linux machine
        if [ "$(whoami)" != root ]; then
            sudo "$@"
        else
            # Don't require password if we're already root.
            "$@"
        fi
    else
        # Might be in Cygwin or MinGW, which don't have sudo.
        "$@"
    fi
}

haveFlagFile() {
    [ -f "${ANTHONYZATION_FLAG}" ]
}

setSystemInfo
